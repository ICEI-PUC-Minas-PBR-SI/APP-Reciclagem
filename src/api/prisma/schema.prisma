// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum typeItems {
  Rciclavel
  Resisuo
}

enum categoryItems {
  Papel
  Plastico
  Vidro
  Oleo
  Metal
  Baterias
}

model User {
  id            Int       @id() @default(autoincrement()) @db.UnsignedInt()
  profile_id    Int       @map("PERFIL_ID") @db.UnsignedInt()
  full_name     String?   @db.VarChar(100)
  email         String    @db.VarChar(100) @unique
  username      String?   @db.VarChar(100) @unique
  password      String    @db.VarChar(255)
  cep           String?   @db.VarChar(20)
  city          String?   @db.VarChar(100)
  street        String?   @db.VarChar(100)
  state         String?   @db.VarChar(100)
  number        String?   @db.VarChar(50)
  phone         String?  @db.VarChar(20)
  status        Boolean  @default(true)
  latitude      Float    @db.Float @default(0.0)
  longitude     Float    @db.Float @default(0.0)

  profile       Profile  @relation(fields: [profile_id], references: [id])
  Record_Collection Record_Collection[]
  Register_Items_Reciclados Register_Items_Reciclados[]

  @@map(name: "users")
  Establishment Establishment[]
}

model Profile {
  id       Int      @id() @default(autoincrement()) @db.UnsignedInt()
  name     String   @db.VarChar(100)
  label    String   @db.VarChar(40)
  is_admin Boolean  @default(false)
  status   Boolean  @default(true)

  users    User[]

  @@map(name: "perfil")
}
model Establishment {
  id            Int      @id() @default(autoincrement()) @db.UnsignedInt()
  userId        Int?     @map("USER_ID") @db.UnsignedInt()
  name          String?   @db.VarChar(100)
  district      String   @db.VarChar(100)
  neighborhood  String   @db.VarChar(100)
  number        Int
  phone         String   @db.VarChar(20)
  cep           Int      @default(0)
  product       String
  score         Boolean?  @default(true)
  latitude      Float    @default(0.0) @db.Float
  longitude     Float   @default(0.0) @db.Float

  user          User?  @relation(fields: [userId], references: [id])
  
  @@map(name: "Establishment")
  Record_Collection Record_Collection[]
  
  Items Items[]
}

model Items {
  id            Int      @id() @default(autoincrement()) @db.UnsignedInt()
  name          String?   @db.VarChar(100)
  type          typeItems
  category      categoryItems
  EstablishmentId        Int @map("EstablishmentId_ID") @db.UnsignedInt()

  Establishment       Establishment  @relation(fields: [EstablishmentId], references: [id])

  @@map(name: "items")
  Register_Items_Reciclados Register_Items_Reciclados[]
}

model Record_Collection {
  id                     Int      @id() @default(autoincrement()) @db.UnsignedInt()
  EstablishmentId        Int @map("EstablishmentId_ID") @db.UnsignedInt()
  userId                 Int @map("USER_ID") @db.UnsignedInt()
  amount                 Int
  material               String?   @db.VarChar(100)
  Measurement_Unit       String?   @db.VarChar(100)
  Collection_Date        DateTime? @map("birth_date") @db.Date
  
  Establishment       Establishment  @relation(fields: [EstablishmentId], references: [id])
  user                User  @relation(fields: [userId], references: [id])

  @@map(name: "Record_Collection")
}

model Register_Items_Reciclados {
  id                    Int      @id() @default(autoincrement()) @db.UnsignedInt()
  ItemsId               Int @map("ITEMS_ID") @db.UnsignedInt()
  userId                Int @map("USER_ID") @db.UnsignedInt()
  Record_Date           DateTime? @map("birth_date") @db.Date

  Items       Items  @relation(fields: [ItemsId], references: [id])
  user       User  @relation(fields: [userId], references: [id])

  @@map(name: "ReRegister_Items_Reciclados")
}